generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  createdAt      DateTime        @default(now())
  emailVerified  DateTime?
  image          String?
  updatedAt      DateTime        @updatedAt
  collegeId      String?
  username       String?         @unique @default("")
  githubUsername String?
  profileImage   String?
  accounts       Account[]
  Authenticator  Authenticator[]
  receivedPings  Notification[]  @relation("ReceivedPings")
  sentPings      Notification[]  @relation("SentPings")
  projects       Project[]
  sessions       Session[]
  college        College?        @relation(fields: [collegeId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model College {
  id        String   @id @default(uuid())
  name      String
  city      String
  state     String?
  createdAt DateTime @default(now())
  users     User[]
}

model Project {
  id               String  @id @default(uuid())
  title            String
  description      String
  githubLink       String
  ping             Notification[]
  currentlyWorking Boolean @default(true)
  authorName       String
  author           User    @relation(fields: [authorName], references: [username])
}

model Notification {
  id         String             @id @default(uuid())
  senderId   String
  receiverId String
  status     NotificationStatus @default(pending)
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])
  createdAt  DateTime           @default(now())
  receiver   User               @relation("ReceivedPings", fields: [receiverId], references: [id])
  sender     User               @relation("SentPings", fields: [senderId], references: [id])
}

enum NotificationStatus {
  pending
  sent
  failed
}
